<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>数据结构C语言预备知识</title>
    <link href="/2021/09/21/%E9%93%BE%E8%A1%A8%E7%AC%94%E8%AE%B0/"/>
    <url>/2021/09/21/%E9%93%BE%E8%A1%A8%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p>讲讲数据结构中C语言的相关前提知识，不涉及循环、分支之类特别基础的知识。</p><p>知识点如下：</p><ul><li><p><strong>结构体struct</strong></p></li><li><p><strong>指针与结构体指针</strong></p></li><li><p><strong>typedef起别名</strong></p></li><li><p><strong>malloc( )函数</strong></p></li></ul><h2 id="结构体struct"><a href="#结构体struct" class="headerlink" title="结构体struct"></a>结构体struct</h2><ul><li><p>结构体类似于普通的标识符（如int,double),只不过在定义的时候需要在前面加上struct</p></li><li><p>结构体的初始化</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LN</span> &#123;</span><span class="hljs-comment">//结构体的标签，类似于 int ;不过对于结构体而言定义时要 struct LN;(在前面加上struct) , </span><br><span class="hljs-comment">//结构体具体内容如</span><br>    <span class="hljs-keyword">int</span> num;<br>    <span class="hljs-keyword">char</span>[MAX] name;<br>&#125;no = &#123;...), np =&#123;...&#125;;<span class="hljs-comment">//对于任何表示这个新结构时都要 在前面加上struct </span><br><span class="hljs-comment">//结构体的定义与初始化,注意在这里不能定义什么 *p 之类的，因为是定义新结构体数据 </span><br></code></pre></div></td></tr></table></figure></li><li><p>在其他地方使用</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LN</span> <span class="hljs-title">np</span> =</span> &#123;...&#125;;      <span class="hljs-comment">//道理一样</span><br></code></pre></div></td></tr></table></figure></li></ul><h2 id="指针与结构体指针"><a href="#指针与结构体指针" class="headerlink" title="指针与结构体指针"></a>指针与结构体指针</h2><ul><li><p>指针变量指向的是一个地址，如：</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-keyword">int</span> * p = &amp;q; <span class="hljs-comment">// 这里的p(注意不是*p)存储的就是q的地址，而*p就会代表q,*p的改动也会改动q</span><br></code></pre></div></td></tr></table></figure></li><li><p>结构体指针同理，结构体指针就是指向一个结构体数据，如：</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> *<span class="hljs-title">p</span>;</span> <span class="hljs-comment">//注意：新建的结构体数据（包括指针）在最前面都要加上struct才可建立</span><br></code></pre></div></td></tr></table></figure></li></ul><h2 id="typedef起别名"><a href="#typedef起别名" class="headerlink" title="typedef起别名"></a>typedef起别名</h2><p>这里先说一下**#define**（宏替换），typedef与其类似，但不是简单替换，而是直接代替。</p><p>并且typedef相比于#define来说范围更广，主要是用来替换结构体标识符，如：</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">int</span> newint;<span class="hljs-comment">//这里就可以用Elem来表示int，注意这里只能给int起一个别名</span><br><br>Elem num = <span class="hljs-number">1</span>;<span class="hljs-comment">//等同于int num = 1;</span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">int</span> * np;<span class="hljs-comment">//还可以给指针标识符起名</span><br>np n, m;<span class="hljs-comment">//还可以定义多个指针变量，等同于int *n, *m;(注意区别！用np不用*了，想一下如果用#define int* np 的结果)</span><br>n = &amp;num;<span class="hljs-comment">//使用起来和正常定义没有区别</span><br></code></pre></div></td></tr></table></figure><p>当然除了这种普通的起别名，也是可以给结构体来起别名；如：</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">//使用typedef   </span><br>*<span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LN</span>&#123;</span><br>&#125;LNode, *Link, op;<span class="hljs-comment">//使用了typedef 可以直接在这里起一个 结构体指针新名字，此时LN是可以省掉的</span><br><br>LNode p;<span class="hljs-comment">//用 typedef 起的LNode这个新结构的新名字可以直接 LNode p;来定义新结构体</span><br>Link m;<span class="hljs-comment">//这里也可以直接用 Link 来直接定义一个结构体指针了</span><br>op p;<span class="hljs-comment">//与普通int起别名不同，结构体起别名，可以起多个名字,这里op p;等同于LNode p;等同于struct LN p;</span><br>  <br><span class="hljs-comment">/********************注*****意**************************************************************/</span><br><span class="hljs-comment">//当使用了typedef 给LN 这个新结构起了别名时，struct 后的标签依旧可以用struct LN p; 来定义新的结构体数据,</span><br><span class="hljs-comment">//typedef 后，定义时是是不可以 struct LNode p; 的，只可直接 LNode p; </span><br><span class="hljs-comment">//与普通int起别名不同，结构体起别名，可以起多个名字</span><br></code></pre></div></td></tr></table></figure><h2 id="malloc-函数"><a href="#malloc-函数" class="headerlink" title="malloc( )函数"></a>malloc( )函数</h2><p>malloc()函数介绍：<a href="https://baike.baidu.com/item/malloc%E5%87%BD%E6%95%B0">malloc函数_百度百科 (baidu.com)</a></p><p>​                    用法：<a href="https://www.runoob.com/cprogramming/c-function-malloc.html">C 库函数 – malloc() | 菜鸟教程 (runoob.com)</a></p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp">指针数据类型如<span class="hljs-keyword">char</span>* p =  (和分配的数据的类型一样如<span class="hljs-keyword">char</span>*)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(数据类型)分配多大空间);<br></code></pre></div></td></tr></table></figure><ul><li>简单来说说我的理解</li><li><ol><li>一定是指针型的，不然空间地址给谁，分配不到不然</li><li>一定是同类型指针，char * 就对应malloc前面的 char * </li><li>分配一定的空间由malloc后面括号里的数值决定，一般由sizeof( )函数决定</li></ol></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>数据结构笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GitHub使用</title>
    <link href="/2021/09/19/GitHub%E4%BD%BF%E7%94%A8/"/>
    <url>/2021/09/19/GitHub%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="初识Git和GitHub"><a href="#初识Git和GitHub" class="headerlink" title="初识Git和GitHub"></a>初识Git和GitHub</h1><p><strong>WIKI</strong>:<a href="https://zh.wikipedia.org/wiki/Git">git - 维基百科，自由的百科全书 (wikipedia.org)</a></p><p>​         <a href="https://zh.wikipedia.org/wiki/GitHub">GitHub - 维基百科，自由的百科全书 (wikipedia.org)</a></p><p><strong>百度</strong>：<a href="https://baike.baidu.com/item/GIT/12647237?fr=aladdin">GIT（分布式版本控制系统）_百度百科 (baidu.com)</a></p><p>​     <a href="https://baike.baidu.com/item/Github">Github_百度百科 (baidu.com)</a></p><h1 id="命令行"><a href="#命令行" class="headerlink" title="命令行"></a>命令行</h1><h2 id="如何Clone一个仓库"><a href="#如何Clone一个仓库" class="headerlink" title="如何Clone一个仓库"></a>如何Clone一个仓库</h2><p>首先在要下载到的文件夹下右击选择<strong>Git Bash</strong>，输入：：</p><p><strong>git clone https://……..(你要clone的仓库复制的地址) (空格(你准备建立的文件夹名)</strong></p><p>“举个栗子”:</p><figure class="highlight plaintext"><figcaption><span>git clone</span><a href="https://github.com/xiaolei565/aimto408.git">kaoyan/408</a></figcaption><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs $">$ git clone https://github.com/xiaolei565/aimto408.git kaoyan/408<br></code></pre></div></td></tr></table></figure><ol><li>地址在那边找？怎么复制？在你打开的仓库的右上方有个绿色的<strong>CODE</strong>键，点击它，再点击一下地址旁边草稿本样的图标，你就可以复制下来仓科地址了</li><li>一定要在下载到的文件夹下操作？是的，建议这样做。即是你熟悉命令行也要在要下载到的文件夹中进行git操作</li><li>文件夹只能一个？不是的，你可以用**/**来建立“文件夹中的文件夹”</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>工具使用</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>这篇blog是怎么来的</title>
    <link href="/2021/09/19/%E9%80%9A%E8%BF%87Hexo%E5%92%8CGithub%E6%9D%A5%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%85%8D%E8%B4%B9%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <url>/2021/09/19/%E9%80%9A%E8%BF%87Hexo%E5%92%8CGithub%E6%9D%A5%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%85%8D%E8%B4%B9%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="搭建"><a href="#搭建" class="headerlink" title="搭建"></a>搭建</h1><p>搭建博客推荐教程：<a href="https://www.cnblogs.com/zhcncn/p/4097881.html">Hexo搭建Github静态博客 - 金石开 - 博客园 (cnblogs.com)</a></p><h2 id="必要软件"><a href="#必要软件" class="headerlink" title="必要软件"></a>必要软件</h2><ul><li><a href="https://nodejs.org/zh-cn/">Node.js (nodejs.org)</a></li><li><a href="https://git-scm.com/">Git (git-scm.com)</a></li><li><a href="https://hexo.io/zh-cn/">Hexo</a></li><li>安装npm和cnpm</li></ul><h2 id="必要资料"><a href="#必要资料" class="headerlink" title="必要资料"></a>必要资料</h2><p>博客搭建：参考hexo官方中文网站：<a href="https://hexo.io/zh-cn/docs/">文档 | Hexo</a></p><p>主题设置：主题的官方文档：如：<a href="https://hexo.fluid-dev.com/docs/start/">开始使用 | Hexo Fluid (fluid-dev.com)</a></p><p>主题寻找：<a href="https://github.com/search?q=hexo-theme">Search · hexo-theme (github.com)</a></p><h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><ul><li><p>git的<strong>SSH-key</strong>问题（非常重要，否则上传不了，<strong>第一次使用要配置</strong>）</p></li><li><p>目录问题，如是在blog文件下进行操作还是在themes文件下操作</p></li><li><p>在预览后（<strong>hexo s</strong>)记得<strong>CTRL + C</strong>退出，否则会出错</p></li><li><p>Node_JS 的环境变量配置</p></li><li><p>Hexo的版本注意（不同的版本的设置略微不同，如要求ssh还是http）</p><ul><li>我的Hexo是4.3.0 在最后的设置就要是 <a href="mailto:&#x67;&#105;&#116;&#64;&#x67;&#x69;&#116;&#104;&#117;&#98;&#46;&#99;&#x6f;&#x6d;">&#x67;&#105;&#116;&#64;&#x67;&#x69;&#116;&#104;&#117;&#98;&#46;&#99;&#x6f;&#x6d;</a>……..而不是<a href="https://github.com/">https://github.com</a>……..</li></ul></li></ul><h1 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h1><h2 id="Hexo命令"><a href="#Hexo命令" class="headerlink" title="Hexo命令"></a>Hexo命令</h2><p>建议自己看官方网站<a href="https://hexo.io/zh-cn/docs/commands">指令 | Hexo</a>,这边举几个常用例子</p><ul><li><strong>hexo d</strong> : 上传博客（deploy）</li><li><strong>hexo s</strong> :  预览（记得<strong>CTRL + C</strong>）</li><li><strong>hexo clean</strong> : 清除缓存</li><li><strong>hexo new “….”</strong> : 新建一个博文</li><li><strong>hexo init</strong> : 初始化博客</li></ul><h2 id="版本号查看命令"><a href="#版本号查看命令" class="headerlink" title="版本号查看命令"></a>版本号查看命令</h2><ul><li>git 版本：git –version</li><li>node_js版本 : node -v</li><li>其他 版本：名字 -v   如：hexo -v</li></ul><h1 id="自定义网站域名"><a href="#自定义网站域名" class="headerlink" title="自定义网站域名"></a>自定义网站域名</h1><p>GitHub_Page的**.github.io**有时让人感觉不够私人与geek</p><p>这里先购买自己的域名，然后在GitHub自己的blog仓库里setting中的page里设置</p><ul><li>注意这样是不够的，因为每次deploy都要重新设置，很烦，但好在hexo是可以设置的</li><li><ol><li>在博客的**_config.yml**中设置url为自己的域名</li><li>在博客文件夹中的根目录（sourse)文件夹中添加<strong>CNAME</strong>不要加后缀(用记事本就好)，在里面写上自己的域名</li><li>要在域名的<strong>DNS解析器</strong>中设置好。一个A，是IP4地址，一个CNAME，是原先****.github.io的的全名</li></ol></li></ul><h1 id="自己遇到其他的一些”坑”"><a href="#自己遇到其他的一些”坑”" class="headerlink" title="自己遇到其他的一些”坑”"></a>自己遇到其他的一些”坑”</h1><ul><li><p>换了个next theme后，执行任何hexo命令后都会得到一个Error提示：</p><p>Cannot find module ‘hexo-util’  ： 运行一个命令安装下就可以：npm install hexo-util –save</p></li></ul><h1 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h1><ul><li>查看他人博客网页主题 ： 右击查看源码，ctrl + f 查找 搜索theme</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>blog那些事</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2021/09/18/hello-world/"/>
    <url>/2021/09/18/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="http://www.codexiaoxian.com/">my blog</a>! This is my very first post.I will show my good ideas in this.Welcom to favorite this pages. If you get any problems  or find something wrong when read my post, you can find me by E-mail or you can ask me on <a href="https://github.com/ssss1001/">GitHub</a>.</p><p>Enjoy!</p><h1 id="搭建个人博客记"><a href="#搭建个人博客记" class="headerlink" title="搭建个人博客记"></a>搭建个人博客记</h1><p>其实对于个人博客早有耳闻，在大一下半年就想搭建一个个人博客了，但是在大概看了下羊哥和frank的视频后感觉云里雾里，好像很难的样子，什么hexo构架，什么GitHub，听起来就已经是技术范满满（对我来说），但在这周不知为何就想起来搭建一个博客，我自己都有些感到奇怪。就上网细看教程，细细研究，还真弄了个大概。</p><p>在这个博客的选择上我选用了主流的<strong>Hexo</strong>+<strong>GitHub</strong>的方法，也就是基于GitHub_Page的方案，选用这个方案一来教程多对我这种刚踏入计算机行业的小萌新友好太多，二来静态网页，不用操太多的心在维护上，三来搭建在GitHub上，不用花高昂的价格去购买云服务器。可以说这个方法是可以保证自己能专注于写博客上，而非陷入一种技术怪圈上。</p><p>为什么搭建它，其实我想了一下，可能最初出发点是因为个人博客是可以为简历加分的一项吧，并且个人博客确实是一种geek范十足的一件事。但，过后我觉得在这里，我要做的是记录，不是生活流水账，而是学习日记，一些自己的总结在这个自己自己野心十足的地方。而不是个人空间，朋友圈。</p><p>来举个“栗子”吧！比如最近的数据结构的链表，我就很想总结总结，也确实有太多总结了。</p><p>本来在<strong>freenom</strong>上我拿下了几个免费域名，但在今天（21-09-20）我下了决心还是买了一个属于自己域名（其实更应该叫做租）。主要因为百度等搜索引擎不收录这就有时候很麻烦了。看了几个人的个人博客也差不多是<strong>自定义域名+GitHub_Page+Hexo/主流blog框架+主题</strong>。挺好！</p><p>希望自己能持之以恒写下去，那些学习/技术总结。</p><p>不出意料，这应该会是唯一一篇在这里的日记式博客了。</p><p>See You!</p>]]></content>
    
    
    
    <tags>
      
      <tag>杂记</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
